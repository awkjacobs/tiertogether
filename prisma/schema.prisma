// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // Uses connection pooling
    url       = env("POSTGRES_PRISMA_URL")
    // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
    // or you'll have dangling databases from migrations
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id             String         @id @unique
    name           String
    boards         Board[]
    ownedBoards    Board[]        @relation("BoardOwner")
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    Rank           Rank[]
    Items          Items[]
    Notification   Notification[]
    declinedInvite Invitation[]   @relation("InvitationDeclined")
    acceptedInvite Invitation[]   @relation("InvitationAccepted")
    viewed         Notification[] @relation("NotificationViewed")
}

model Board {
    id             String         @id @default(uuid())
    boardName      String
    type           String
    owner          User           @relation("BoardOwner", fields: [ownerId], references: [id])
    ownerId        String
    users          User[]
    items          Items[]
    special        Boolean?
    tierLabels     String?
    bleachers      Boolean?
    bleachersLabel String?
    dugout         Boolean?
    dugoutLabel    String?
    Notification   Notification[]
    createdAt      DateTime       @default(now())

    Rank Rank[]
}

model Items {
    id            String  @id @unique
    backdrop_path String?
    rank          Rank[]
    Board         Board[]
    addedBy       User[]
}

model Rank {
    User    User   @relation(fields: [userId], references: [id])
    userId  String
    rank    String
    Items   Items? @relation(fields: [itemsId], references: [id])
    itemsId String
    Board   Board  @relation(fields: [boardId], references: [id])
    boardId String

    @@id([userId, itemsId, boardId])
}

model Notification {
    id         String      @id @default(uuid())
    Board      Board?      @relation(fields: [boardId], references: [id])
    boardId    String
    User       User?       @relation(fields: [userId], references: [id])
    userId     String?
    type       String
    content    String
    viewed     User[]      @relation("NotificationViewed")
    createdAt  DateTime    @default(now())
    Invitation Invitation?
}

model Invitation {
    id             String        @id
    boardId        String
    createdAt      DateTime      @default(now())
    accepted       User[]        @relation("InvitationAccepted")
    declined       User[]        @relation("InvitationDeclined")
    updatedAt      DateTime      @updatedAt
    Notification   Notification? @relation(fields: [notificationId], references: [id])
    notificationId String?       @unique
}
